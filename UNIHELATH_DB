-- ==========================================
-- UniHealth Clinics Management System
-- ==========================================

DROP DATABASE IF EXISTS unihealth;
CREATE DATABASE unihealth;
USE unihealth;

-- ======================
-- Universities Table
-- ======================
CREATE TABLE universities (
    university_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(150) NOT NULL,
    abbreviation VARCHAR(50) UNIQUE NOT NULL,
    province VARCHAR(100) NOT NULL,
    contact_email VARCHAR(150),
    contact_phone VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ======================
-- Campuses Table
-- ======================
CREATE TABLE campuses (
    campus_id INT AUTO_INCREMENT PRIMARY KEY,
    university_id INT NOT NULL,
    campus_name VARCHAR(150) NOT NULL,
    province VARCHAR(100) NOT NULL,
    address VARCHAR(255),
    contact_number VARCHAR(20),
    FOREIGN KEY (university_id) REFERENCES universities(university_id)
);

-- ======================
-- Students Table
-- Synced from University API
-- ======================
CREATE TABLE students (
    student_number VARCHAR(20) PRIMARY KEY,
    university_id INT NOT NULL,
    full_name VARCHAR(150) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    phone VARCHAR(20),
    campus_id INT NOT NULL,
    profile_image VARCHAR(255) DEFAULT 'default.png',
    is_active BOOLEAN DEFAULT TRUE,
    synced_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (university_id) REFERENCES universities(university_id),
    FOREIGN KEY (campus_id) REFERENCES campuses(campus_id)
);

-- ======================
-- Staff Table
-- ======================
CREATE TABLE staff (
    staff_id INT AUTO_INCREMENT PRIMARY KEY,
    university_id INT NOT NULL,
    full_name VARCHAR(150) NOT NULL,
    role ENUM('Nurse','Doctor','Counselor','Admin') NOT NULL,
    specialization VARCHAR(100),
    email VARCHAR(150) UNIQUE NOT NULL,
    phone VARCHAR(20),
    campus_id INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    synced_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (university_id) REFERENCES universities(university_id),
    FOREIGN KEY (campus_id) REFERENCES campuses(campus_id)
);

-- ======================
-- Users Table (Authentication)
-- ======================
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    university_id INT NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('Student','Staff','Admin') NOT NULL,
    system_role ENUM('Medic','Patient','Admin') NOT NULL DEFAULT 'Patient',
    student_number VARCHAR(20),
    staff_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (university_id) REFERENCES universities(university_id),
    FOREIGN KEY (student_number) REFERENCES students(student_number),
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id)
);

-- ======================
-- Appointments Table
-- ======================
CREATE TABLE appointments (
    appointment_id INT AUTO_INCREMENT PRIMARY KEY,
    university_id INT NOT NULL,
    student_number VARCHAR(20) NOT NULL,
    staff_id INT NOT NULL,
    campus_id INT NOT NULL,
    appointment_type ENUM('Medical','Mental Health','General Checkup','Other') NOT NULL,
    reason TEXT,
    appointment_date DATETIME NOT NULL,
    duration_minutes INT DEFAULT 30,
    status ENUM('Pending','Confirmed','Completed','Cancelled') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (university_id) REFERENCES universities(university_id),
    FOREIGN KEY (student_number) REFERENCES students(student_number),
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id),
    FOREIGN KEY (campus_id) REFERENCES campuses(campus_id)
);

-- ======================
-- Referrals Table
-- ======================
CREATE TABLE referrals (
    referral_id INT AUTO_INCREMENT PRIMARY KEY,
    appointment_id INT NOT NULL,
    from_staff_id INT NOT NULL,
    to_staff_id INT,
    to_campus_id INT,
    external_clinic VARCHAR(255),
    notes TEXT,
    status ENUM('Pending','Approved','Completed','Rejected') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (appointment_id) REFERENCES appointments(appointment_id),
    FOREIGN KEY (from_staff_id) REFERENCES staff(staff_id),
    FOREIGN KEY (to_staff_id) REFERENCES staff(staff_id),
    FOREIGN KEY (to_campus_id) REFERENCES campuses(campus_id)
);

-- ======================
-- Clinic Visits Table
-- ======================
CREATE TABLE clinic_visits (
    visit_id INT AUTO_INCREMENT PRIMARY KEY,
    university_id INT NOT NULL,
    student_number VARCHAR(20) NOT NULL,
    staff_id INT NOT NULL,
    visit_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    notes TEXT,
    diagnosis TEXT,
    treatment TEXT,
    FOREIGN KEY (university_id) REFERENCES universities(university_id),
    FOREIGN KEY (student_number) REFERENCES students(student_number),
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id)
);

-- ======================
-- Awareness Messages Table
-- ======================
CREATE TABLE awareness_messages (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    university_id INT NOT NULL,
    title VARCHAR(150) NOT NULL,
    message TEXT NOT NULL,
    audience ENUM('All','Students','Staff') DEFAULT 'All',
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (university_id) REFERENCES universities(university_id),
    FOREIGN KEY (created_by) REFERENCES staff(staff_id)
);

-- ======================
-- Emergency Ambulance Requests Table
-- ======================
CREATE TABLE ambulance_requests (
    request_id INT AUTO_INCREMENT PRIMARY KEY,
    university_id INT NOT NULL,
    campus_id INT NOT NULL,
    student_number VARCHAR(20) NOT NULL,
    status ENUM('Pending','Dispatched','Completed','Cancelled') DEFAULT 'Pending',
    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (university_id) REFERENCES universities(university_id),
    FOREIGN KEY (campus_id) REFERENCES campuses(campus_id),
    FOREIGN KEY (student_number) REFERENCES students(student_number)
);

-- ======================
-- Messaging / Notifications
-- ======================
CREATE TABLE messages (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    university_id INT NOT NULL,
    sender_id INT NOT NULL,
    receiver_id INT NOT NULL,
    content TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (university_id) REFERENCES universities(university_id),
    FOREIGN KEY (sender_id) REFERENCES users(user_id),
    FOREIGN KEY (receiver_id) REFERENCES users(user_id)
);


-- ========================
-- managing wlakins
-- ===========================
CREATE TABLE walkins (
    walkin_id INT AUTO_INCREMENT PRIMARY KEY,
    student_number VARCHAR(20) NOT NULL,
    campus_id INT NOT NULL,
    nurse_id INT NOT NULL,
    service_type ENUM('General Consultation', 'Dental', 'Mental Health', 'Sexual Health', 'Follow-up', 'Vaccination', 'Allergy Testing', 'Physical Examination') NOT NULL,
    reason TEXT,
    urgency ENUM('Routine', 'Urgent', 'Emergency') DEFAULT 'Routine',
    status ENUM('Pending', 'In Progress', 'Completed', 'Cancelled') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_number) REFERENCES students(student_number),
    FOREIGN KEY (campus_id) REFERENCES campuses(campus_id),
    FOREIGN KEY (nurse_id) REFERENCES staff(staff_id)
);

-- ============================
-- recurring appointmebts
-- ==============================
CREATE TABLE service_recurring_appointments (
    recurring_id INT AUTO_INCREMENT PRIMARY KEY,
    student_number VARCHAR(20) NOT NULL,
    campus_id INT NOT NULL,
    nurse_id INT NOT NULL,
    service_type ENUM(
        'Monthly Vaccination',
        'Contraception Shot',
        'Routine Checkup',
        'Allergy Follow-up',
        'Other'
    ) NOT NULL,
    reason TEXT,
    recurrence_interval_days INT NOT NULL, -- e.g., 30 for monthly
    next_appointment DATE NOT NULL,
    status ENUM('Active','Paused','Cancelled') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_number) REFERENCES students(student_number),
    FOREIGN KEY (campus_id) REFERENCES campuses(campus_id),
    FOREIGN KEY (nurse_id) REFERENCES staff(staff_id)
);
